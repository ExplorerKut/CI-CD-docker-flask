name: Test and Deploy Image

on:
  push:
    branches: [ main ]

jobs:

  build:
    name: Lint code base
    runs-on: ubuntu-latest

    steps: 

      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Lint the python code
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_GITHUB_ACTIONS: false
  
  build-push-image:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region : ${{ secrets.AWS_REGION }}

      - name: login to amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flask-docker-web-app
          IMAGE_TAG: flask-docker-web-app
        run:  |
          docker build -t  ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        env:  
          # ECS_SERVICE: sample-app-service
          # ECS_CLUSTER: default
          ECS_TASK_DEFINITION: .aws/ecs-task-definition.json
          CONTAINER_NAME: sample-app
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with: 
          task-definition: ${ECS_TASK_DEFINITION}
          container-name: ${CONTAINER_NAME}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        env: 
          ECS_SERVICE: sample-app-service
          ECS_CLUSTER: default
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with: 
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${ECS_SERVICE}
          cluster: ${ECS_CLUSTER}
          wait-for-service-stability: true
     
  